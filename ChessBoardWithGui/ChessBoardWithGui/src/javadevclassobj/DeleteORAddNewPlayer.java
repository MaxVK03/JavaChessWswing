/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package javadevclassobj;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.time.Year;
import java.util.ArrayList;
import java.util.Date;
import java.util.Scanner;
import javax.swing.JOptionPane;

/**
 *
 * @author Max
 */
public class DeleteORAddNewPlayer extends javax.swing.JFrame {

    /**
     * Creates new form DeleteORAddNewPlayer
     */
    //Declares a new DB manager object
    private MyDBManager db = new MyDBManager();
    //Declares a new Player Data array list
    private ArrayList<PlayerData> PData = db.getAllPlayerData();
    public DeleteORAddNewPlayer() 
    {
        //initialises components
        initComponents();
        getContentPane().setBackground(new java.awt.Color(117, 117, 117));//sets
        //the specified background colour that is alligned to the sprites
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        txtOut = new javax.swing.JTextPane();
        cmbSelectPlayer = new javax.swing.JComboBox<>();
        btn_DeletePlayer = new javax.swing.JButton();
        btn_InsertNewPlayer = new javax.swing.JButton();
        textIn_PlayerName = new javax.swing.JTextField();
        textIN_PlayerDOB = new javax.swing.JTextField();
        textIN_PlayerWLB = new javax.swing.JTextField();
        Btn_Exit = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jScrollPane1.setViewportView(txtOut);

        cmbSelectPlayer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbSelectPlayerActionPerformed(evt);
            }
        });

        btn_DeletePlayer.setText("Delete Player");
        btn_DeletePlayer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_DeletePlayerActionPerformed(evt);
            }
        });

        btn_InsertNewPlayer.setText("Insert New Player");
        btn_InsertNewPlayer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_InsertNewPlayerActionPerformed(evt);
            }
        });

        textIn_PlayerName.setText("Input Player Name");
        textIn_PlayerName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                textIn_PlayerNameFocusLost(evt);
            }
        });
        textIn_PlayerName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textIn_PlayerNameActionPerformed(evt);
            }
        });

        textIN_PlayerDOB.setText("dd/mm/yyyy");

        textIN_PlayerWLB.setText("W-L-D");
        textIN_PlayerWLB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textIN_PlayerWLBActionPerformed(evt);
            }
        });

        Btn_Exit.setText("Exit");
        Btn_Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_ExitActionPerformed(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(117, 117, 117));
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/javadevclassobj/SmilingChessBoardBG.png"))); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btn_DeletePlayer, javax.swing.GroupLayout.DEFAULT_SIZE, 147, Short.MAX_VALUE)
                                    .addComponent(cmbSelectPlayer, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 18, Short.MAX_VALUE)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(65, 65, 65)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(textIN_PlayerWLB, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
                                .addComponent(textIN_PlayerDOB)
                                .addComponent(btn_InsertNewPlayer, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
                                .addComponent(textIn_PlayerName))
                            .addComponent(Btn_Exit, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_DeletePlayer)
                    .addComponent(textIn_PlayerName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbSelectPlayer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textIN_PlayerDOB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(textIN_PlayerWLB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btn_InsertNewPlayer)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Btn_Exit))
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmbSelectPlayerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbSelectPlayerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbSelectPlayerActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        //Sets the string players to nothing
        String Players = "";
        //Loops through Player Data
        for (int i = 0; i < PData.size(); i++)
       {
           //Constructs the string for output
                PlayerData p = PData.get(i);
                Players = Players + p.getPlayerName() + "\n";
       }
        //outputs the string
        txtOut.setText(Players);
        //Sets the added player boolean to true
        boolean addedPlayers = false;
        //If added players is false
        if (addedPlayers == false) 
        
        //loops through PData array
        {
            for (int i = 0; i < PData.size(); i++)
            {
                //Selects a Player Data
                PlayerData p = PData.get(i);
                //Adds that PData to the combo box
                cmbSelectPlayer.addItem(p.getPlayerName());
                //Chosenp2ID = p.getPlayerID();
                //System.out.println(Chosenp2ID);
            }
            //sets added players to true so double adding dosent happen
            addedPlayers = true;
        }
    }//GEN-LAST:event_formWindowActivated

    private void btn_DeletePlayerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_DeletePlayerActionPerformed
        //gets where the selected player is
        int selectedPIN = cmbSelectPlayer.getSelectedIndex();
        //Sets that player as the player to delete
        PlayerData ToDelete = PData.get(selectedPIN);
        //Confirms the delete
        int dialogResult = JOptionPane.showConfirmDialog (null, "Are you sure you want to delete " + ToDelete.getPlayerName(),
                            "Confirm Deletion",JOptionPane.YES_NO_OPTION);
        
        if (dialogResult == JOptionPane.YES_OPTION)
            {
                
                db.deletePlayer(ToDelete.getPlayerID());
                //populateList();
            }
        new DeleteORAddNewPlayer().setVisible(true);
        this.dispose();
        
    }//GEN-LAST:event_btn_DeletePlayerActionPerformed

    private void textIn_PlayerNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textIn_PlayerNameActionPerformed
        textIn_PlayerName.setText("");
    }//GEN-LAST:event_textIn_PlayerNameActionPerformed

    private void textIN_PlayerWLBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textIN_PlayerWLBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textIN_PlayerWLBActionPerformed

    private void btn_InsertNewPlayerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_InsertNewPlayerActionPerformed
         //Reading in PlayerName from the text Field
        String PName = textIn_PlayerName.getText();
        //Reading in Player Date of birth from text Field
        String PDOB = textIN_PlayerDOB.getText(); 
        //Reading in Player Win Loss draw from text field, to be split below
        String PWLD = textIN_PlayerWLB.getText(); 
        //Splitter that is going to be used to split wins loss and draws 
        //based on location of "-"
        //Checker that the date position of - is there
        //Declaring wins
        String PWins = "none";
        //Declaring losses 
        String PLosses = "none";
        //Declaring Draws
        String PDraws = "none";
        //Used to store wins if it is entered as a int
        if (PWLD.contains("-")) 
        {
            //tries to split the string
            try
            {
                Scanner Splitter = new Scanner(PWLD).useDelimiter("-"); 
            
                //Declaring wins eqaul to the splitter next Attribute
                PWins = Splitter.next();
                //Declaring losses eqaul to the splitter next Attribute
                PLosses = Splitter.next();
                //Declaring Draws eqaul to the splitter next Attribute
                PDraws = Splitter.next();
       
            }
            //if there is a error we know the format was incorrect
            catch(Exception e)
            {
                //outputs error message
                JOptionPane.showMessageDialog(null, "Incorrect Format for Wins loss's and draws \nShould be in format W-L-D");
            }
        }
        
        int PlayerWins = 0; 
        //Used to store Losses if it is entered as a int
        int PlayerLosses = 0;
        //Used to store Draws if it is entered as a int
        int PlayerDraws = 0; 
        boolean error = false;
        //used to make sure no duplicates
        int track = 1;
        //Date used to check input
        Date date = null;
        
        //Tries to convert the Player wins String to a integer.
        //This code is all for the Win loss draw
        try 
        {
            //attempts to parse to a integer
            PlayerWins = Integer.parseInt(PWins);    
            //tries for Losses
            try
        {
            //attempts to parse to a integer
            PlayerLosses = Integer.parseInt(PLosses);  
            try
        {
            //attempts to parse to a integer
            PlayerDraws = Integer.parseInt(PDraws);            
        }
        //If incorrect format of number/text then will return an error
        catch (NumberFormatException nfe)
        {
            error = true;
            JOptionPane.showMessageDialog(null, "Incorrect Format for Wins loss's and draws \nShould be in format W-L-D");
        }
        }
        //If incorrect format of number/text then will return an error
        catch (NumberFormatException nfe)
        {
            error = true;
            JOptionPane.showMessageDialog(null, "Incorrect Format for Wins loss's and draws \nShould be in format W-L-D");
        }
        }
        //If incorrect format of number/text then will return an error
        catch (NumberFormatException nfe) 
        {
            //sets error to true
            error = true;
            //displays the error message
            JOptionPane.showMessageDialog(null, "Incorrect Format for Wins loss's and draws \nShould be in format W-L-D");
        }
        //Checks that there is no duplicate in Player Names
        boolean isDupName = false;
        //Runs through the array
        for (int i = 0; i < PData.size(); i++)
        {
            //Checks that the player name dosent match any in DB
            if (PName.equalsIgnoreCase(PData.get(i).getPlayerName())) 
            {
                //sets duplicate name to true
                isDupName = true; 
            }       
        }
        //Operates if there is a duplicate name
        if (isDupName) 
        {
            //outputs the approptiate error message
            JOptionPane.showMessageDialog(null, "Duplicate Name entered");
            //Sets error to true so item not added to DB
            error = true;
        }
        
        //Checks that the date is valid
        boolean dateError = false;
        //trys to convert input to date
        try
        {
            //Declares a new date formatter
            DateFormat format = new SimpleDateFormat("dd/MM/yyyy");
            //Attempts to parse the PDOB string to a date
            date = format.parse(PDOB);
        }
        //If wrong format then catches the error
        catch(Exception e)
        {
            //sets date error to true
            dateError = true;
        }
        //If error in date than this happens
        if (dateError)
        {
            //Sets error to true so item not added to DB
            error = true;
            //Outputs the appropriate error message
            JOptionPane.showMessageDialog(null, "Error with date format");
        }
        //Check that the persons birthday is in the last 100 years
        if (PDOB.length()==10) 
        {
            if (2021 - Integer.parseInt(PDOB.substring(6,10)) > 100) 
            {
            //ouputs the type of error to user
            JOptionPane.showMessageDialog(null, "Player Age alot greater than expected");
            //sets the error value to true as there is a error in the input
            error = true;
            }
             
             //Checks that they havent entered a date in the future
            if (2021< Integer.parseInt(PDOB.substring(6,10)))
            {
            //outputs the appropriate error message to the user
            JOptionPane.showMessageDialog(null, "Player Age cannot be greater than the current year");
            //sets the error value to true as there is a error in the input
            error = true;
            }
        }
        else
        {
             //outputs the appropriate error message to the user
            JOptionPane.showMessageDialog(null, "Date Entry was incorrect, Please try again");
            //sets the error value to true as there is a error in the input
            error = true;
        }
       
        
         
        //Used to check that there is not a abnormal length named player
        if (PName.length() < 1)
        {
            //displays error message
            JOptionPane.showMessageDialog(null, "Player Name Must be longer than one character");
            //sets error to true;
            error = true;
        }
        //Checks the name length
        if (PName.length() > 20)
        {
            //displays error message
            JOptionPane.showMessageDialog(null, "Player Name Must be shorter than twenty character");
            //sets error to true;
            error = true;
        }
        
        
        
        
        //Happens if no errors are present
        if (!error)
        {
            //Creates a new Player object to be sent to the DB
            PlayerData NewPlayer = new PlayerData(PName, PDOB, PlayerWins, PlayerLosses, PlayerDraws);
            //Sends the new Player to the DB Manager
            db.addPlayer(NewPlayer);
        }
        
        
        
        //Next lines done so that changes are seen
        new DeleteORAddNewPlayer().setVisible(true); //Opens the selected JFrame
        this.dispose(); //Closes the current JFrame
    }//GEN-LAST:event_btn_InsertNewPlayerActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void Btn_ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_ExitActionPerformed
       //creates a new instance of the selected form, 
       //in this case the home screen
       new HomeScreen().setVisible(true); 
       //Disposes/closes the form that is currently open
       this.dispose(); 
    }//GEN-LAST:event_Btn_ExitActionPerformed

    private void textIn_PlayerNameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textIn_PlayerNameFocusLost
        //checks if player has entered text 
        if (textIn_PlayerName.getText().length() < 1) 
        {
            //sets the text to the string
            textIn_PlayerName.setText("Enter Player Name");
        }
    }//GEN-LAST:event_textIn_PlayerNameFocusLost

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DeleteORAddNewPlayer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DeleteORAddNewPlayer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DeleteORAddNewPlayer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DeleteORAddNewPlayer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DeleteORAddNewPlayer().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Btn_Exit;
    private javax.swing.JButton btn_DeletePlayer;
    private javax.swing.JButton btn_InsertNewPlayer;
    private javax.swing.JComboBox<String> cmbSelectPlayer;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField textIN_PlayerDOB;
    private javax.swing.JTextField textIN_PlayerWLB;
    private javax.swing.JTextField textIn_PlayerName;
    private javax.swing.JTextPane txtOut;
    // End of variables declaration//GEN-END:variables
}
