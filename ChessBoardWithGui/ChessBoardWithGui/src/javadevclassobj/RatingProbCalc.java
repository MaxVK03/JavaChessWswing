/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package javadevclassobj;

/**
 *
 * @author Max
 */
public class RatingProbCalc extends javax.swing.JFrame {

    private int p1; //declares the p1 integer
    private int p2; //declares the p2 intger
    
    /**
     * Creates new form RatingProbCalc
     */
    public RatingProbCalc() {
        initComponents();
        //used to change the background colour of the associated JFrame/Panel
        getContentPane().setBackground(new java.awt.Color(117, 117, 117)); 
        
    }
        
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtINP1 = new javax.swing.JTextField();
        txtInP2 = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtOutPRating = new javax.swing.JTextPane();
        btnCalculate = new javax.swing.JButton();
        btnEXIT = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        p1ErrorTxt = new javax.swing.JLabel();
        p2ErrorTxt = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(420, 300));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Stencil", 0, 14)); // NOI18N
        jLabel1.setText("Probability of winning by ranking");

        txtINP1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtINP1FocusGained(evt);
            }
        });
        txtINP1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtINP1ActionPerformed(evt);
            }
        });

        txtInP2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtInP2ActionPerformed(evt);
            }
        });

        jScrollPane2.setViewportView(txtOutPRating);

        btnCalculate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/javadevclassobj/CalcIcon.png"))); // NOI18N
        btnCalculate.setText("Calculate");
        btnCalculate.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        btnCalculate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalculateActionPerformed(evt);
            }
        });

        btnEXIT.setIcon(new javax.swing.ImageIcon(getClass().getResource("/javadevclassobj/ExitButtonIcon.png"))); // NOI18N
        btnEXIT.setText("Exit");
        btnEXIT.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnEXIT.setMargin(new java.awt.Insets(2, 0, 2, 0));
        btnEXIT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEXITActionPerformed(evt);
            }
        });

        p1ErrorTxt.setFont(new java.awt.Font("Tahoma", 1, 8)); // NOI18N
        p1ErrorTxt.setText("jLabel4");

        p2ErrorTxt.setFont(new java.awt.Font("Tahoma", 1, 8)); // NOI18N
        p2ErrorTxt.setText("jLabel5");

        jLabel4.setText("P1");

        jLabel5.setText("P2");

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/javadevclassobj/FancyHorse.png"))); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel6)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel6)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(82, 82, 82)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, 0)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(btnCalculate)
                            .addComponent(txtInP2, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtINP1, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(61, 61, 61)
                                .addComponent(btnEXIT, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(p1ErrorTxt, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(p2ErrorTxt, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap())))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 26, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel2)
                                .addComponent(jLabel3)
                                .addComponent(p1ErrorTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel4))
                            .addComponent(txtINP1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtInP2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(p2ErrorTxt)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnCalculate, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnEXIT, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtInP2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtInP2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtInP2ActionPerformed

    private void btnCalculateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCalculateActionPerformed
        //gets text from the text box
        String P1Rating = txtINP1.getText(); 
        //gets text from the text box
        String P2Rating = txtInP2.getText();
        //declares the p1isInt Boolean to false
        //Used as a checker variable to see that all conditions are true
        //to allow output
        boolean p1isInt = false; 
        boolean allow = true; 
        //if statement checking that there is text in input box
        if (P1Rating.length()==0) 
        {
             //Displays the error text box as there is a error in the input
            p1ErrorTxt.show();
            //Displays the type of error to the user
            p1ErrorTxt.setText("must Enter a rating"); 
            //sets allow to false as there is a error in the input
            allow = false; 
        }
        //Action performed if text in box
        else 
        {
            //Hides the error text box as every 
            //input test up to here has been passed
            p1ErrorTxt.hide(); 
            //Sets allow to true as all input tests up to here have been passed
            allow = true; 
        }   
        //if statement checking that there is text in input box
        if (P2Rating.length()==0) 
        {
            //Displays the error text box as there is error with input
            p2ErrorTxt.show(); 
            //Displays the type of error to the user
            p2ErrorTxt.setText("must Enter a rating"); 
            //sets allow to false as there is a error in the input
            allow = false; 
        }
        else //Action performed if text in box
        {
            //Sets allow to true as all input tests up to here have been passed
            p2ErrorTxt.hide(); 
            //Sets allow to true as all input tests up to here have been passed
            allow = true; 
        }    
        //used to converte the String to a Integer
        try 
        {
            //Trys to parse the p1 to a int
            p1 = Integer.parseInt(P1Rating);
            //If it works set p1 is int to true
            p1isInt = true;
            //Hides the error text box as every input 
            //test up to here has been passed
            p1ErrorTxt.hide(); 
            //Sets allow to true as all input tests up to here have been passed
            allow = true; 
        }
        //if the conversion isnt succsesful then this code is implemented
        catch (NumberFormatException e) 
        {
           //Displays the error text box as there is a error in the input
            p1ErrorTxt.show(); 
            //Displays the type of error to the user
            p1ErrorTxt.setText("must Enter a int"); 
            //sets allow to false as there is a error in the input
            allow = false; 
        }
       
        //used to converte the String to a Integer
        try
        {
            //parses p2 to a int
            p2 = Integer.parseInt(P2Rating); 
            //Hides the error text box as every input 
            //test up to here has been passed
            p2ErrorTxt.hide(); 
            //Sets allow to true as all input tests up to here have been passed
            allow = true; 
           
        }
        //if the conversion isnt succsesful then this code is implemented
        catch (NumberFormatException e) 
        {
            //Sets the variable to true
            p1isInt = true; 
            //Displays the error text box as there is error with input
            p2ErrorTxt.show(); 
            //Displays the type of error to the user
            p2ErrorTxt.setText("must Enter a Int"); 
            //sets allow to false as there is a error in the input
            allow = false; 
        }
            
        if (p1 < 0) //Checks that the int inputted is positive
        {
            //Displays the error text box as there is error with input
            p1ErrorTxt.show(); 
            //Displays the type of error to the user
            p1ErrorTxt.setText("must Enter a positive int"); 
            //sets allow to false as there is a error in the input
            allow = false; 
        }
        //if all tests are passed it is used to hide the error box
        else if(allow == true) 
        {
           p1ErrorTxt.hide(); 
        }
        //Checks that the int inputted is positive
        if (p2 < 0) 
        {
            //Displays the error text box as there is error with input
            p2ErrorTxt.show();
            //Displays the type of error to the user
            p2ErrorTxt.setText("must Enter a positive int"); 
            //sets allow to false as there is a error in the input
            allow = false; 
        }
        //if all tests are passed it is used to hide the error box
        else if(allow == true) 
        {
            //Hides the error text box as every input test up to 
            //here has been passed
            p2ErrorTxt.hide(); 
            //Sets allow to true as all input tests up to here have been passed
            allow = true; 
        }
        if (p1 > 4000) 
        {
            //Displays the error text box as there is error with input
            p1ErrorTxt.show(); 
            //Displays the type of error to the user
            p1ErrorTxt.setText("must Enter a int below 4000"); 
            //sets allow to false as there is a error in the input
            allow = false; 
        }
        if (p2 > 4000) 
        {
            //Displays the error text box as there is error with input
            p2ErrorTxt.show(); 
            //Displays the type of error to the user
            p2ErrorTxt.setText("must Enter a int below 4000"); 
            //sets allow to false as there is a error in the input
            allow = false; 
        }
        
        
        //used to calculate the probability using the algorythym 
        double prob = Math.ceil((((double)p1-(double)p2)/400 * 20)*100)/100; 
        //before outputting checks that the input passes all the checks
        if (allow) 
        {
             //check that the probability is less than 99% and greater than 0
            if (prob < 99 && prob > 0)
            {
                
                txtOutPRating.setText("P1 has a " + prob + "% better chance of winning");
            }
            //If the probability of player one winning 
            //is very close to 100 of even above 100
            //we just say it is very close to 100%
            else if (prob > 99) 
            {
                //outputs probability to player
                txtOutPRating.setText("P1 has a near 100% better chance of winning");
            }
            //check that the probability is less than 99% and greater than 0
            else if (prob < 0 && prob > -99)  
            {
                //outputs probability to player
                txtOutPRating.setText("P2 has a " + prob*-1 + "% better chance of winning");
            }
            //If the probability of player one winning is very close to 100
            //or even above 100 we just say it is very close to 100%
            else if (prob < -99) 
            {
                //outputs probability to player
                txtOutPRating.setText("P2 has a near 100% better chance of winning");
            }
            
        }
        //will be the selected option if the input does not pass the tests above
        else 
        {
            //outputs that there was a error to the text box
            txtOutPRating.setText("An error in your input"); 
        }
        
       
    }//GEN-LAST:event_btnCalculateActionPerformed

    private void txtINP1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtINP1FocusGained
        txtINP1.setText("");
    }//GEN-LAST:event_txtINP1FocusGained

    private void txtINP1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtINP1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtINP1ActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        p1ErrorTxt.setText(""); //When form opened sets text to empty
        p1ErrorTxt.hide(); //Hides error box when form opened
        p2ErrorTxt.setText(""); //When form opened sets text to empty
        p2ErrorTxt.hide(); //Hides error box when form opened
    }//GEN-LAST:event_formWindowActivated

    private void btnEXITActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEXITActionPerformed
        new HomeScreen().setVisible(true); //creates a new instance of the selected form, in this case the home screen
        this.dispose(); //Disposes/closes the form that is currently open
    }//GEN-LAST:event_btnEXITActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("*Dark Nimbus*".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RatingProbCalc.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RatingProbCalc.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RatingProbCalc.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RatingProbCalc.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RatingProbCalc().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCalculate;
    private javax.swing.JButton btnEXIT;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel p1ErrorTxt;
    private javax.swing.JLabel p2ErrorTxt;
    private javax.swing.JTextField txtINP1;
    private javax.swing.JTextField txtInP2;
    private javax.swing.JTextPane txtOutPRating;
    // End of variables declaration//GEN-END:variables
}
