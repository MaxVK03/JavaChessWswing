package javadevclassobj;

import java.util.ArrayList;

/**
 *
 * @author Max
 */
public class ReviewGames extends javax.swing.JFrame
{

    /**
     * Creates new form ReviewGames
     */
    //initialises and sets the boolean addedP1 to false
    private boolean addedP1 = false; 
    //initialises and sets the boolean addedP2 to false
    private boolean addedP2 = false; 
    //initialises int chosenp1ID
    private int Chosenp1ID; 
    //initialises int chosenp2ID
    private int Chosenp2ID; 
     //declares new MyDBManager names db for ReviewGames class
    private MyDBManager db = new MyDBManager();
    //declares a new array list of Player Data
    private ArrayList<PlayerData> PData = db.getAllPlayerData(); 
     //declares a new array list of Game stats Data
    private ArrayList<GameStatsData> GSData = db.getAllGameStatsData(); 
    //Declares a new array list of GameData
    private ArrayList<GameData> GData = db.getAllGameData(); 
    //initialises and sets the boolean in to false
    private boolean in = false; 
    //constructor for ReviewGames Class
    public ReviewGames() 
    {
        initComponents();
        //sets the specified background colour that is alligned to the sprites
        getContentPane().setBackground(new java.awt.Color(117, 117, 117)); 

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jCheckBox4 = new javax.swing.JCheckBox();
        jCheckBox5 = new javax.swing.JCheckBox();
        jComboBox1 = new javax.swing.JComboBox<>();
        jTextField3 = new javax.swing.JTextField();
        text_player2Name = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        Spinner_GameID = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        textOut_reviewGames = new javax.swing.JTextArea();
        btnSearchGame = new javax.swing.JButton();
        btn_gameStatsBetween = new javax.swing.JButton();
        ChkBox_showMoves = new javax.swing.JCheckBox();
        ChkBox_descendingMoveOrder = new javax.swing.JCheckBox();
        btn_ShowGamesBetweenPlayers = new javax.swing.JCheckBox();
        CMB_GameStatsBetweenP1 = new javax.swing.JComboBox<>();
        CMB_GameStatsBetweenP2 = new javax.swing.JComboBox<>();
        btn_ReturnToMainReviewGames = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        CMBbox_GetGameID = new javax.swing.JComboBox<>();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();

        jTextField1.setText("jTextField1");

        jButton4.setText("Show Only moves");

        jButton5.setText("Show all games with this player");

        jButton7.setText("jButton7");

        jCheckBox4.setText("jCheckBox4");

        jCheckBox5.setText("jCheckBox5");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jTextField3.setText("Player Name");
        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });

        text_player2Name.setText("Player Name");

        jTextField2.setText("Player Name");

        jButton8.setText("jButton8");

        jButton9.setText("jButton9");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jScrollPane2.setViewportView(jTextPane1);

        Spinner_GameID.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                Spinner_GameIDFocusLost(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jLabel1.setText("Review Games");

        textOut_reviewGames.setBackground(new java.awt.Color(117, 117, 117));
        textOut_reviewGames.setColumns(20);
        textOut_reviewGames.setFont(new java.awt.Font("Microsoft YaHei Light", 1, 13)); // NOI18N
        textOut_reviewGames.setRows(5);
        jScrollPane1.setViewportView(textOut_reviewGames);

        btnSearchGame.setText("Search Game");
        btnSearchGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchGameActionPerformed(evt);
            }
        });

        btn_gameStatsBetween.setText("Game stats between");
        btn_gameStatsBetween.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_gameStatsBetweenActionPerformed(evt);
            }
        });

        ChkBox_showMoves.setText("Show only moves");

        ChkBox_descendingMoveOrder.setText("descending move order");

        btn_ShowGamesBetweenPlayers.setText("Show player stats");
        btn_ShowGamesBetweenPlayers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_ShowGamesBetweenPlayersActionPerformed(evt);
            }
        });

        CMB_GameStatsBetweenP1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CMB_GameStatsBetweenP1MouseClicked(evt);
            }
        });

        CMB_GameStatsBetweenP2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CMB_GameStatsBetweenP2MouseClicked(evt);
            }
        });

        btn_ReturnToMainReviewGames.setText("Return To main Menu");
        btn_ReturnToMainReviewGames.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_ReturnToMainReviewGamesActionPerformed(evt);
            }
        });

        jLabel2.setText("Enter Game ID");

        CMBbox_GetGameID.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CMBbox_GetGameIDMouseClicked(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(117, 117, 117));

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/javadevclassobj/PieceStringGreyBack.png"))); // NOI18N
        jPanel1.add(jLabel3);

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/javadevclassobj/PieceStringGreyBack.png"))); // NOI18N
        jPanel1.add(jLabel4);

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/javadevclassobj/PieceStringGreyBack.png"))); // NOI18N
        jPanel1.add(jLabel5);

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/javadevclassobj/PieceStringGreyBack.png"))); // NOI18N
        jPanel1.add(jLabel6);

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/javadevclassobj/PieceStringGreyBack.png"))); // NOI18N
        jPanel1.add(jLabel7);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btn_gameStatsBetween, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                            .addComponent(btn_ShowGamesBetweenPlayers, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(CMB_GameStatsBetweenP1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(CMB_GameStatsBetweenP2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 56, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(ChkBox_descendingMoveOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btnSearchGame, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE)
                                    .addComponent(ChkBox_showMoves, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(CMBbox_GetGameID, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(163, 163, 163))
            .addGroup(layout.createSequentialGroup()
                .addGap(121, 121, 121)
                .addComponent(btn_ReturnToMainReviewGames, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSearchGame)
                    .addComponent(btn_gameStatsBetween))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ChkBox_showMoves)
                    .addComponent(btn_ShowGamesBetweenPlayers))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ChkBox_descendingMoveOrder)
                    .addComponent(CMB_GameStatsBetweenP1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(CMB_GameStatsBetweenP2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(CMBbox_GetGameID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addComponent(btn_ReturnToMainReviewGames)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    //used to display the game stats between two players
    private void btn_gameStatsBetweenActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btn_gameStatsBetweenActionPerformed
    {//GEN-HEADEREND:event_btn_gameStatsBetweenActionPerformed

        //makes sure that item is selected in P1 and P2 combo box
        if (CMB_GameStatsBetweenP1.getSelectedIndex() == -1 || CMB_GameStatsBetweenP2.getSelectedIndex() == -1) 
        {
            System.out.println("Error"); //prints out an error
        }
        else //if if statement returns false
        {
            //sets Chosenp1ID to the the Player selected in combo box
            Chosenp1ID = CMB_GameStatsBetweenP1.getSelectedIndex() + 1; 
            //sets Chosenp2ID to the the Player selected in combo box
            Chosenp2ID = CMB_GameStatsBetweenP2.getSelectedIndex() + 1; 
        }

        String outputGameStats = ""; //inistialises a string called output games. 
         //Loops as many times as Game Stats data has objects
        for (int i = 0; i < GSData.size(); i++)
        {
            //checks if the selected players match up to any games
            if (GSData.get(i).getPlayer1() == Chosenp1ID && GSData.get(i).getPlayer2() == Chosenp2ID) 
            {
                //Displays the game if it finds on the matches the selected players
                outputGameStats = outputGameStats + GSData.get(i).GameStatsDataToString() + ""; 
            }
        }
         //checks if loop has found a game between 2 players
        if (outputGameStats.length()<1)
        {//returns a message that no games have been found between players
            outputGameStats = "No games between the two selected Players"; 
        }
        //execited if option selected
        if (btn_ShowGamesBetweenPlayers.isSelected()) 
        {
            //sets the output appropritaly
            outputGameStats = outputGameStats + "\n" + PData.get(Chosenp1ID - 1).PlayerDataToString() + "\n" + PData.get(Chosenp2ID - 1).PlayerDataToString();
        }
        //sends out the text
        textOut_reviewGames.setText(outputGameStats);


    }//GEN-LAST:event_btn_gameStatsBetweenActionPerformed

    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jTextField3ActionPerformed
    {//GEN-HEADEREND:event_jTextField3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField3ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton9ActionPerformed
    {//GEN-HEADEREND:event_jButton9ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton9ActionPerformed

    private void btnSearchGameActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnSearchGameActionPerformed
    {//GEN-HEADEREND:event_btnSearchGameActionPerformed
        //MyDBManager db = new MyDBManager();
        int SearchgameID = 0;
        //boolean GameExist = false;
        String outputGame = "";
        
        //gets which game
            SearchgameID = CMBbox_GetGameID.getSelectedIndex()+1;
            //System.out.println(SearchgameID);
            //Checks which options are selected
        if (ChkBox_descendingMoveOrder.isSelected()) 
        {
            for (int i = GData.size()-1; i > 0; i--)
            {
                //gets selected GameData
                GameData g = GData.get(i);
                //checks if they match
                if (g.getGameID() == SearchgameID && ChkBox_showMoves.isSelected() == false) 
                {
                    //if they do then it is added to the output games
                    outputGame = outputGame + "\n" + g.GameDataToString();     
                }  
                //checks option selected
                else if(g.getGameID() == SearchgameID && ChkBox_showMoves.isSelected() == true)
                {
                    //if they do then it is added to the output games
                    outputGame = outputGame + "\n" + g.getMoveNo() + ". " + g.getMove();
                }

            }
        }
        else
        {
            //Loops through Game Data
            for (int i = 0; i < GData.size(); i++)
            {
                //sets g to the game data at i
                GameData g = GData.get(i);
                //If the match
                if (g.getGameID() == SearchgameID && ChkBox_showMoves.isSelected() == false) 
                {
                     //if they do then it is added to the output games
                    outputGame = outputGame + "\n" + g.GameDataToString();    
                }  
                //Depends on selection of options
                else if(g.getGameID() == SearchgameID && ChkBox_showMoves.isSelected() == true)
                {
                     //if they do then it is added to the output games
                    outputGame = outputGame + "\n" + g.getMoveNo() + ". " + g.getMove();
                }

            }
        }
            
            //sets text out to the output game string put together in the above method
        textOut_reviewGames.setText(outputGame);
    }//GEN-LAST:event_btnSearchGameActionPerformed

    private void CMB_GameStatsBetweenP1MouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_CMB_GameStatsBetweenP1MouseClicked
    {//GEN-HEADEREND:event_CMB_GameStatsBetweenP1MouseClicked

        


    }//GEN-LAST:event_CMB_GameStatsBetweenP1MouseClicked

    private void CMB_GameStatsBetweenP2MouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_CMB_GameStatsBetweenP2MouseClicked
    {//GEN-HEADEREND:event_CMB_GameStatsBetweenP2MouseClicked

    }//GEN-LAST:event_CMB_GameStatsBetweenP2MouseClicked

    private void btn_ShowGamesBetweenPlayersActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btn_ShowGamesBetweenPlayersActionPerformed
    {//GEN-HEADEREND:event_btn_ShowGamesBetweenPlayersActionPerformed
        

    }//GEN-LAST:event_btn_ShowGamesBetweenPlayersActionPerformed

    private void Spinner_GameIDFocusLost(java.awt.event.FocusEvent evt)//GEN-FIRST:event_Spinner_GameIDFocusLost
    {//GEN-HEADEREND:event_Spinner_GameIDFocusLost
        
    }//GEN-LAST:event_Spinner_GameIDFocusLost

    private void CMBbox_GetGameIDMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_CMBbox_GetGameIDMouseClicked
    {//GEN-HEADEREND:event_CMBbox_GetGameIDMouseClicked
        
        
    }//GEN-LAST:event_CMBbox_GetGameIDMouseClicked

    private void formWindowActivated(java.awt.event.WindowEvent evt)//GEN-FIRST:event_formWindowActivated
    {//GEN-HEADEREND:event_formWindowActivated
        // Inputing all neccasary data in combo boxes, etc...
        //inputting into select P1 Combo box
        if (addedP1 == false) {
            for (int i = 0; i < PData.size(); i++) {
                PlayerData p = PData.get(i);
                CMB_GameStatsBetweenP1.addItem(p.getPlayerName());
                //Chosenp1ID = p.getPlayerID();
            }
            addedP1 = true;
        }
        //Inputting into select p2 combo Box
        if (addedP2 == false) {
            for (int i = 0; i < PData.size(); i++) {
                PlayerData p = PData.get(i);
                CMB_GameStatsBetweenP2.addItem(p.getPlayerName());
                //Chosenp2ID = p.getPlayerID();
                //System.out.println(Chosenp2ID);
            }
            addedP2 = true;
        }
        //getting game ID's of all games in DB
        if (in == false)
        {
            for (int i = 0; i < GSData.size(); i++) 
            {
            CMBbox_GetGameID.addItem("" + (i+1));
            in = true;
            }
        }
        
        
        
    }//GEN-LAST:event_formWindowActivated

    private void btn_ReturnToMainReviewGamesActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btn_ReturnToMainReviewGamesActionPerformed
    {//GEN-HEADEREND:event_btn_ReturnToMainReviewGamesActionPerformed
        
        new HomeScreen().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btn_ReturnToMainReviewGamesActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        }
        catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ReviewGames.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ReviewGames.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ReviewGames.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ReviewGames.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new ReviewGames().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> CMB_GameStatsBetweenP1;
    private javax.swing.JComboBox<String> CMB_GameStatsBetweenP2;
    private javax.swing.JComboBox<String> CMBbox_GetGameID;
    private javax.swing.JCheckBox ChkBox_descendingMoveOrder;
    private javax.swing.JCheckBox ChkBox_showMoves;
    private javax.swing.JSpinner Spinner_GameID;
    private javax.swing.JButton btnSearchGame;
    private javax.swing.JButton btn_ReturnToMainReviewGames;
    private javax.swing.JCheckBox btn_ShowGamesBetweenPlayers;
    private javax.swing.JButton btn_gameStatsBetween;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JCheckBox jCheckBox5;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JTextArea textOut_reviewGames;
    private javax.swing.JTextField text_player2Name;
    // End of variables declaration//GEN-END:variables
}
